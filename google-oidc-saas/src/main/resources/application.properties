# Quarkus OIDC: Google as the provider
# Quarkus knows how to talk to well-known providers; set provider=google.
quarkus.oidc.provider=google
quarkus.oidc.client-id=${OIDC_GOOGLE_CLIENT_ID}
quarkus.oidc.credentials.secret=${OIDC_GOOGLE_CLIENT_SECRET}
quarkus.oidc.application-type=web-app

# Ask for OpenID, email, profile, and calendar on the initial login.
quarkus.oidc.authentication.scopes=openid,email,profile,https://www.googleapis.com/auth/calendar.readonly

# Set the redirect URI to the standard OIDC callback path
quarkus.oidc.authentication.redirect-path=/q/oidc/callback

# Restore original path after callback and clean code/state params
quarkus.oidc.authentication.restore-path-after-redirect=true
quarkus.oidc.authentication.remove-redirect-parameters=true

# Make Quarkus call Google UserInfo endpoint so we can rely on enriched claims
quarkus.oidc.authentication.user-info-required=true

# Minimal security: everything requires auth except assets and the landing page
quarkus.http.auth.permission.public.paths=/assets/*,/
quarkus.http.auth.permission.public.policy=permit
quarkus.http.auth.permission.app.paths=/*
quarkus.http.auth.permission.app.policy=authenticated

# Dev DB
quarkus.datasource.db-kind=h2
quarkus.datasource.jdbc.url=jdbc:h2:mem:saas;DB_CLOSE_DELAY=-1
quarkus.hibernate-orm.schema-management.strategy = drop-and-create

# REST Client base URLs for Google APIs
# People API (profile alias), Calendar API
quarkus.rest-client.google-people.url=https://people.googleapis.com
quarkus.rest-client.google-calendar.url=https://www.googleapis.com